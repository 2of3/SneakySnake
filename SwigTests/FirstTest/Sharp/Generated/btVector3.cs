/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


public class btVector3 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal btVector3(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(btVector3 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~btVector3() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          cppPINVOKE.delete_btVector3(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public SWIGTYPE_p_float m_floats {
    set {
      cppPINVOKE.btVector3_m_floats_set(swigCPtr, SWIGTYPE_p_float.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = cppPINVOKE.btVector3_m_floats_get(swigCPtr);
      SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
      return ret;
    } 
  }

  public btVector3() : this(cppPINVOKE.new_btVector3__SWIG_0(), true) {
  }

  public btVector3(float _x, float _y, float _z) : this(cppPINVOKE.new_btVector3__SWIG_1(_x, _y, _z), true) {
  }

  public float dot(btVector3 v) {
    float ret = cppPINVOKE.btVector3_dot(swigCPtr, btVector3.getCPtr(v));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float length2() {
    float ret = cppPINVOKE.btVector3_length2(swigCPtr);
    return ret;
  }

  public float length() {
    float ret = cppPINVOKE.btVector3_length(swigCPtr);
    return ret;
  }

  public float norm() {
    float ret = cppPINVOKE.btVector3_norm(swigCPtr);
    return ret;
  }

  public float distance2(btVector3 v) {
    float ret = cppPINVOKE.btVector3_distance2(swigCPtr, btVector3.getCPtr(v));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float distance(btVector3 v) {
    float ret = cppPINVOKE.btVector3_distance(swigCPtr, btVector3.getCPtr(v));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btVector3 safeNormalize() {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_safeNormalize(swigCPtr), false);
    return ret;
  }

  public btVector3 normalize() {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_normalize(swigCPtr), false);
    return ret;
  }

  public btVector3 normalized() {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_normalized(swigCPtr), true);
    return ret;
  }

  public btVector3 rotate(btVector3 wAxis, float angle) {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_rotate(swigCPtr, btVector3.getCPtr(wAxis), angle), true);
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float angle(btVector3 v) {
    float ret = cppPINVOKE.btVector3_angle(swigCPtr, btVector3.getCPtr(v));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btVector3 absolute() {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_absolute(swigCPtr), true);
    return ret;
  }

  public btVector3 cross(btVector3 v) {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_cross(swigCPtr, btVector3.getCPtr(v)), true);
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float triple(btVector3 v1, btVector3 v2) {
    float ret = cppPINVOKE.btVector3_triple(swigCPtr, btVector3.getCPtr(v1), btVector3.getCPtr(v2));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int minAxis() {
    int ret = cppPINVOKE.btVector3_minAxis(swigCPtr);
    return ret;
  }

  public int maxAxis() {
    int ret = cppPINVOKE.btVector3_maxAxis(swigCPtr);
    return ret;
  }

  public int furthestAxis() {
    int ret = cppPINVOKE.btVector3_furthestAxis(swigCPtr);
    return ret;
  }

  public int closestAxis() {
    int ret = cppPINVOKE.btVector3_closestAxis(swigCPtr);
    return ret;
  }

  public void setInterpolate3(btVector3 v0, btVector3 v1, float rt) {
    cppPINVOKE.btVector3_setInterpolate3(swigCPtr, btVector3.getCPtr(v0), btVector3.getCPtr(v1), rt);
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public btVector3 lerp(btVector3 v, float t) {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_lerp(swigCPtr, btVector3.getCPtr(v), t), true);
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float getX() {
    float ret = cppPINVOKE.btVector3_getX(swigCPtr);
    return ret;
  }

  public float getY() {
    float ret = cppPINVOKE.btVector3_getY(swigCPtr);
    return ret;
  }

  public float getZ() {
    float ret = cppPINVOKE.btVector3_getZ(swigCPtr);
    return ret;
  }

  public void setX(float _x) {
    cppPINVOKE.btVector3_setX(swigCPtr, _x);
  }

  public void setY(float _y) {
    cppPINVOKE.btVector3_setY(swigCPtr, _y);
  }

  public void setZ(float _z) {
    cppPINVOKE.btVector3_setZ(swigCPtr, _z);
  }

  public void setW(float _w) {
    cppPINVOKE.btVector3_setW(swigCPtr, _w);
  }

  public float x() {
    float ret = cppPINVOKE.btVector3_x(swigCPtr);
    return ret;
  }

  public float y() {
    float ret = cppPINVOKE.btVector3_y(swigCPtr);
    return ret;
  }

  public float z() {
    float ret = cppPINVOKE.btVector3_z(swigCPtr);
    return ret;
  }

  public float w() {
    float ret = cppPINVOKE.btVector3_w(swigCPtr);
    return ret;
  }

  public void setMax(btVector3 other) {
    cppPINVOKE.btVector3_setMax(swigCPtr, btVector3.getCPtr(other));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setMin(btVector3 other) {
    cppPINVOKE.btVector3_setMin(swigCPtr, btVector3.getCPtr(other));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setValue(float _x, float _y, float _z) {
    cppPINVOKE.btVector3_setValue(swigCPtr, _x, _y, _z);
  }

  public void getSkewSymmetricMatrix(btVector3 v0, btVector3 v1, btVector3 v2) {
    cppPINVOKE.btVector3_getSkewSymmetricMatrix(swigCPtr, btVector3.getCPtr(v0), btVector3.getCPtr(v1), btVector3.getCPtr(v2));
  }

  public void setZero() {
    cppPINVOKE.btVector3_setZero(swigCPtr);
  }

  public bool isZero() {
    bool ret = cppPINVOKE.btVector3_isZero(swigCPtr);
    return ret;
  }

  public bool fuzzyZero() {
    bool ret = cppPINVOKE.btVector3_fuzzyZero(swigCPtr);
    return ret;
  }

  public void serialize(btVector3FloatData dataOut) {
    cppPINVOKE.btVector3_serialize(swigCPtr, btVector3FloatData.getCPtr(dataOut));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deSerialize(btVector3FloatData dataIn) {
    cppPINVOKE.btVector3_deSerialize(swigCPtr, btVector3FloatData.getCPtr(dataIn));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void serializeFloat(btVector3FloatData dataOut) {
    cppPINVOKE.btVector3_serializeFloat(swigCPtr, btVector3FloatData.getCPtr(dataOut));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deSerializeFloat(btVector3FloatData dataIn) {
    cppPINVOKE.btVector3_deSerializeFloat(swigCPtr, btVector3FloatData.getCPtr(dataIn));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void serializeDouble(btVector3DoubleData dataOut) {
    cppPINVOKE.btVector3_serializeDouble(swigCPtr, btVector3DoubleData.getCPtr(dataOut));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public void deSerializeDouble(btVector3DoubleData dataIn) {
    cppPINVOKE.btVector3_deSerializeDouble(swigCPtr, btVector3DoubleData.getCPtr(dataIn));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
  }

  public int maxDot(btVector3 array, int array_count, SWIGTYPE_p_float dotOut) {
    int ret = cppPINVOKE.btVector3_maxDot(swigCPtr, btVector3.getCPtr(array), array_count, SWIGTYPE_p_float.getCPtr(dotOut));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int minDot(btVector3 array, int array_count, SWIGTYPE_p_float dotOut) {
    int ret = cppPINVOKE.btVector3_minDot(swigCPtr, btVector3.getCPtr(array), array_count, SWIGTYPE_p_float.getCPtr(dotOut));
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public btVector3 dot3(btVector3 v0, btVector3 v1, btVector3 v2) {
    btVector3 ret = new btVector3(cppPINVOKE.btVector3_dot3(swigCPtr, btVector3.getCPtr(v0), btVector3.getCPtr(v1), btVector3.getCPtr(v2)), true);
    if (cppPINVOKE.SWIGPendingException.Pending) throw cppPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
